@page "/"
@using NodaTime;
@using NodaTimePicker

<h3>NodaTime Date Picker</h3>
<hr />

<p>
	A Date/Time picker for <a href="http://blazor.net">Blazor</a> using <a href="https://github.com/nodatime/nodatime">NodaTime</a>.
</p>
<p>
	The aim of this project is to develop Date/Time picker components for Blazor applications, using NodaTime as the only dependency for Date and Time calculations, and CSS Grid for layout.<br />
</p>
<p>
	It is inspired by the very successful Javascript Date/Time picker developed by TempusDominus, though any dependencies on Bootstrap or jQuery have been removed - it is not simply a port of the code or interop, but a fresh start from a zero base.<br />
</p>
<p>
	Check us out on <a href="https://github.com/nheath99/BlazorNodaTimeDateTimePicker">GitHub.</a>
</p>

<h3 id="gettingStarted">Getting Started</h3>
<hr />
<p>
	The library can be downloaded from NuGet by searching for: BlazorNodaTimeDateTimePicker in NuGet Package Manager, or by executing the following command in the Package Manager Console:
</p>
<p>
	<code>PM> Install-Package NodaTimePicker -Version 0.8.0</code>
</p>

<h3 id="examples">Examples</h3>
<hr />

<h3 id="inline">Inline</h3>
<p>
	Displays an inline DatePicker that is visible by default.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true OnSelectedDateChanged=changed1 />
	</div>
	<div class="order-0 order-sm-1">
		<div>Selected Date: <span>@selectedDate1</span></div>
	</div>
</div>

<pre><code class="html">@demo1String</code></pre>

<hr />

<h3 id="boundToInput">Bound to Input</h3>

<p>
	Focus on the Input element to display the DatePicker.<br />
	Select a Date to close the DatePicker.
</p>

<input type="text" @onfocus=@focussed2 value=@selectedDate2 class="form-control mb-2" placeholder="Focus to open DatePicker..." />
<DatePicker Visible=@datePicker2Visible OnSelected=@selected2 ShowClose=@true />

<pre><code class="html">@demo2String</code></pre>

<hr />

<h3 id="firstDayOfWeek">First Day of Week</h3>
<p>Specify the first day of the week. Default is Monday.</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true FirstDayOfWeek=@firstDOW3 />
	</div>
	<div class="order-0 order-sm-1">
		<p>
			First Day of Week:
			<select @bind=@firstDOW3 class="custom-select">
				<option value="@IsoDayOfWeek.Monday">Monday</option>
				<option value="@IsoDayOfWeek.Tuesday">Tuesday</option>
				<option value="@IsoDayOfWeek.Wednesday">Wednesday</option>
				<option value="@IsoDayOfWeek.Thursday">Thursday</option>
				<option value="@IsoDayOfWeek.Friday">Friday</option>
				<option value="@IsoDayOfWeek.Saturday">Saturday</option>
				<option value="@IsoDayOfWeek.Sunday">Sunday</option>
			</select>
		</p>
	</div>
</div>

<hr />
<h3 id="displayDaysOfWeek">Display Days of Week</h3>
<p>
	Hide the Day of Week row.
</p>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DisplayDaysOfWeek=@displayDOW4 />
	</div>
	<div class="order-0 order-sm-1">
		<label>
			<input type="checkbox" @bind=@displayDOW4 />
			Display Days of Week
		</label>
	</div>
</div>

<hr />
<h3 id="localisation">Localisation</h3>
<p>
	Specify any valid FormatProvider.
</p>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true FormatProvider=@formatProvider5 />
	</div>
	<p class="order-0 order-sm-1">
		<select @bind=@formatProvider5String class="custom-select">
			@foreach (var cultureName in cultureNames)
			{
				<option value=@cultureName>@cultureName</option>
			}
		</select>
	</p>
</div>

<hr />
<h3 id="minDate">Min. Date</h3>
<p>
	Set a specific date as the minimum date that can be selected.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true MinDate=@minDate6 />
	</div>
	<p class="order-0 order-sm-1">
		Min. date: @minDate6
	</p>
</div>

<hr />
<h3 id="maxDate">Max. Date</h3>
<p>
	Set a specific date as the maximum date that can be selected.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true MaxDate=@maxDate7 />
	</div>
	<p class="order-0 order-sm-1">
		Max. date: @maxDate7
	</p>
</div>

<hr />
<h3 id="disabledDates">Disabled Dates</h3>
<p>
	Specify a sequence of dates that cannot be selected.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DisabledDates=@disabledDates8 />
	</div>
	<ul class="order-0 order-sm-1">
		@foreach (var date in disabledDates8)
		{
			<li>@date</li>
		}
	</ul>
</div>

<hr />
<h3 id="enabledDates">Enabled Dates</h3>
<p>
	Specify a sequence of dates that can be selected. Any dates that do not appear in this sequence will always be disabled.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true EnabledDates=@enabledDates9 />
	</div>
	<ul class="order-0 order-sm-1">
		@foreach (var date in enabledDates9)
		{
			<li>@date</li>
		}
	</ul>
</div>

<hr />
<h3 id="daysOfWeekDisabled">Days of Week Disabled</h3>
<p>
	Specify which days of the week are disabled.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DaysOfWeekDisabled=@DaysOfWeekDisabled10 />
	</div>
	<ul class="list-unstyled order-0 order-sm-1">
		<li><label><input type="checkbox" @bind=monday10 /> Monday</label></li>
		<li><label><input type="checkbox" @bind=tuesday10 /> Tuesday</label></li>
		<li><label><input type="checkbox" @bind=wednesday10 /> Wednesday</label></li>
		<li><label><input type="checkbox" @bind=thursday10 /> Thursday</label></li>
		<li><label><input type="checkbox" @bind=friday10 /> Friday</label></li>
		<li><label><input type="checkbox" @bind=saturday10 /> Saturday</label></li>
		<li><label><input type="checkbox" @bind=sunday10 /> Sunday</label></li>
	</ul>
</div>

<hr />
<h3 id="setSelectedDate">Set Selected Date</h3>
<p>
	Programatically change the SelectedDate on the control.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true SelectedDate=@selectedDate11 />
	</div>
    <p class="order-0 order-sm-1">
        <button type="button" class="btn btn-outline-primary mb-2" @onclick="@(() => selectedDate11 = setSelectedDate11_1)">Set date to @setSelectedDate11_1</button><br />
        <button type="button" class="btn btn-outline-primary mb-2" @onclick="@(() => selectedDate11 = setSelectedDate11_2)">Set date to @setSelectedDate11_2</button><br />
        <button type="button" class="btn btn-outline-primary" @onclick="@(() => selectedDate11 = setSelectedDate11_3)">Set date to @setSelectedDate11_3</button>
        <button type="button" class="btn btn-outline-primary" @onclick="@(() => selectedDate11 = setSelectedDate11_4)">Set date to @setSelectedDate11_4</button>
    </p>
</div>

<hr />
<h3 id="disabledDateIntervals">Disabled Date Intervals</h3>
<i>Todo</i>

<hr />
<h3 id="dayViewHeaderFormat">Day View Header Format</h3>
<p>
	Set the format for the header when in Day View.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DayViewHeaderFormat="MM yy" />
	</div>
	<p class="order-0 order-sm-1">
		DayViewHeaderFormat: <strong>MM yy</strong>
	</p>
</div>

<hr />
<h3 id="monthViewHeaderFormat">Month View Header Format</h3>
<p>
	Set the format for the header when in the Month View.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true MonthViewHeaderFormat="yy" ViewMode=@ViewMode.Months />
	</div>
	<p class="order-0 order-sm-1">
		MonthViewHeaderFormat: <strong>yy</strong><br />
		ViewMode: <strong>ViewMode.Months</strong>
	</p>
</div>

<hr />
<h3 id="showTodayClear">Show Today/Clear</h3>
<p>
	Specify whether to show the <strong>Today</strong> and <strong>Clear</strong> buttons. Default is to display both.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true ShowToday=@showToday ShowClear=@showClear />
	</div>
	<div class="order-0 order-sm-1">
		<label>
			<input type="checkbox" @bind=@showToday />
			Show Today
		</label><br />
		<label>
			<input type="checkbox" @bind=@showClear />
			Show Clear
		</label>
	</div>
</div>

<hr />
<h3 id="viewMode">Initial View Mode</h3>
<p>
	Set the initial <strong>ViewMode</strong> of the control.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true ViewMode=@ViewMode.Years />
	</div>
	<div class="order-0 order-sm-1">
		ViewMode: <strong>ViewMode.Years</strong>
	</div>
</div>

<hr />
<h3 id="events">Events</h3>
<p>
	Subscribe to events raised by the control.
</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3">
		<DatePicker Inline=true OnSelectedDateChanged=@changed OnSelected=@selected OnCleared=@cleared />
	</div>
	<ul>
		@foreach (var e in eventsList)
		{
			<li>@e</li>
		}
	</ul>
</div>
<hr />
<h3 id="events">Tests julien</h3>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3">
		<DatePicker Inline=true DisplayWeekNumber="true" ShowClear="false" ShowClose="false" ShowToday="false"
					ViewMode="NodaTimePicker.ViewMode.Days" FormatProvider=@(System.Globalization.CultureInfo.CurrentUICulture) 
					MinDate="MinDateTest" MaxDate="MaxDateTest" SelectedDate="SelectedDateTest"
					HideOldAndNew="true" CanSelectDisabled="true" DisabledDates="@this.ClosedDaysTest" OnSelectedDateChanged="@OnSelectedDateChangedTest" />
	</div>
</div>

@code {

    public LocalDate SelectedDateTest => LocalDate.FromDateTime(DateTime.Now);
    public LocalDate MinDateTest => SelectedDateTest.PlusMonths(-3);
    public LocalDate MaxDateTest => SelectedDateTest.PlusMonths(3);

    protected IList<LocalDate> ClosedDaysTest { get; set; } = new List<LocalDate>();

    protected void OnSelectedDateChangedTest(LocalDate? date)
    {
        if (date.HasValue)
        {
            if (ClosedDaysTest.Contains(date.Value))
            {
                ClosedDaysTest.Remove(date.Value);
            }
            else
            {
                ClosedDaysTest.Add(date.Value);
            }
        }
    }


    System.Globalization.CultureInfo FormatProvider = new System.Globalization.CultureInfo("fr-FR");
    static LocalDate Today = SystemClock.Instance.GetCurrentInstant().InUtc().LocalDateTime.Date;

    LocalDate? selectedDate1;
    void changed1(LocalDate? localDate)
    {
        selectedDate1 = localDate;
        StateHasChanged();
    }
    string demo1String = "<DatePicker Inline=true OnSelectedDateChanged=changed1 />";

    bool datePicker2Visible = false;
    LocalDate? selectedDate2;
    void focussed2(EventArgs e)
    {
        datePicker2Visible = true;
    }

    void selected2(LocalDate localDate)
    {
        selectedDate2 = localDate;
        datePicker2Visible = false;
        StateHasChanged();
    }

    string demo2String = @"<input type=""text"" @onfocus=""@focussed"" />
<DatePicker Visible=""datePicker2Visible"" OnSelected=""selected2"" />

@functions {
bool datePicker2Visible = false;
void focussed2(UIFocusEventArgs e)
{
datePicker2Visible = true;
}
void selected2(LocalDate localDate)
{
datePicker2Visible = false;
StateHasChanged();
}
}";

    IsoDayOfWeek firstDOW3 = IsoDayOfWeek.Tuesday;

    bool displayDOW4 = false;

    string cultureName = cultureNames[0];
    static string[] cultureNames = new[] { "fr-FR", "pl-PL", "en-GB" };

    string formatProvider5String
    {
        get => cultureName;
        set
        {
            cultureName = value;
            formatProvider5 = new System.Globalization.CultureInfo(value);
        }
    }

    System.Globalization.CultureInfo formatProvider5 = new System.Globalization.CultureInfo(cultureNames[0]);

    LocalDate minDate6 = Today;
    LocalDate maxDate7 = Today;

    IEnumerable<LocalDate> disabledDates8
    {
        get
        {
            yield return Today.PlusDays(-1);
            yield return Today.PlusDays(1);
            yield return Today.PlusDays(5);
            yield return Today.PlusDays(7);
            yield return Today.PlusDays(8);
        }
    }

    IEnumerable<LocalDate> enabledDates9
    {
        get
        {
            yield return Today.PlusDays(-1);
            yield return Today;
            yield return Today.PlusDays(1);
            yield return Today.PlusDays(5);
            yield return Today.PlusDays(7);
            yield return Today.PlusDays(8);
        }
    }

    bool monday10 = true;
    bool tuesday10 = false;
    bool wednesday10 = true;
    bool thursday10 = false;
    bool friday10 = true;
    bool saturday10 = true;
    bool sunday10 = true;

    IEnumerable<IsoDayOfWeek> DaysOfWeekDisabled10
    {
        get
        {
            if (!monday10)
            {
                yield return IsoDayOfWeek.Monday;
            }
            if (!tuesday10)
            {
                yield return IsoDayOfWeek.Tuesday;
            }
            if (!wednesday10)
            {
                yield return IsoDayOfWeek.Wednesday;
            }
            if (!thursday10)
            {
                yield return IsoDayOfWeek.Thursday;
            }
            if (!friday10)
            {
                yield return IsoDayOfWeek.Friday;
            }
            if (!saturday10)
            {
                yield return IsoDayOfWeek.Saturday;
            }
            if (!sunday10)
            {
                yield return IsoDayOfWeek.Sunday;
            }
        }
    }

    // Default to Today
    LocalDate selectedDate11 = Today;
    LocalDate setSelectedDate11_1 = Today.PlusDays(2);
    LocalDate setSelectedDate11_2 = Today.PlusWeeks(1);
    LocalDate setSelectedDate11_3 = Today.PlusMonths(1);
    LocalDate setSelectedDate11_4 = Today.PlusMonths(2).PlusYears(1);

    bool showToday = true;
    bool showClear = true;

    List<string> eventsList = new List<string>()
{
        "Events will appear here..."
    };

    void changed(LocalDate? d)
    {
        eventsList.Add($"Changed. Value: {d}");
        StateHasChanged();
    }

    void selected(LocalDate d)
    {
        eventsList.Add($"Selected. Value: {d}");
        StateHasChanged();
    }

    void cleared()
    {
        eventsList.Add("Cleared");
        StateHasChanged();
    }
}